/*
1. 親要素の参照は「&」を必ずしも使わないで良い
*/
.class_01{
  + div{
    font-size: 1em;
  }
  > .child{
    font-size: 2em;
  }
}

/*
2. ルート要素の更に上の親要素を指定したい
*/
aside{
  width: 240px;
  .menu{
    margin-bottom: 20px;
  }
  main.full & .child{
    width: 960px;
  }
}

/*
3. ルート要素を抜けたい
*/
.class_03{
  section{
    width: 640px;
    @at-root {
      .class_03_2{
        width: 100px;
      }
    }
  }
}

/*
4. プロパティのネスト
*/
.class_04{
  border: 0{ // border:半角スペースが必要
    bottom: 1px solid #aaa;
  }
}
p{
  font-size: 1px;
}
/*
5. ミックスイン
*/
@mixin roundBox{
  border-radius: 10px;
  background-color: #ededed;
  bottom: 1px solid #666;
}
.class_05{
  @include roundBox;
}

/*
6. ミックスイン 複数の引数
font(,16px) のようには書けない
*/
@mixin font($color:red,$size:12px){
  color: $color;
  font-size: $size;
}
.class_06{
  @include font($size: 16px);
}

/*
7. 可変長引数 受け取り側を可変にする（ES6に同じ）
*/
@mixin shadow ($value...){
  text-shadow: $value;
}
.class_07{
  @include shadow(
    8px 8px 0 #666,
    10px -10px 0 #999
  );
}

/*
8. 可変長引数 呼び出し側で展開（ES6に同じ）
*/
@mixin box ($w:300px, $pd:20px,$mg:40px,$clr:#f00){
  width: $w;
  padding: $pd;
  margin: $mg;
  color: $clr;
}
$val_08: 200px,40px;
.class_08{
  @include box($val_08...);
}

/*
9. @extend 継承
*/
// 継承元もCSSに書きだされる
.box_09{
  padding: 20px;
  border: 1px solid #000;  
}
.class_09{
  @extend .box_09;
  background-color: yellow;
}

// 継承元はCSSに書きだされない
%box_09_2{
  padding: 20px;
  border: 1px solid #000;  
}
.class_09_2{
  @extend %box_09_2;
  background-color: yellow;
}

/*
10. @extend %●●● 多重継承
*/
%txt{
  font-size: 14px;
}
%txt_red{
  @extend %txt;
  color: red;
}
.class_10{
  @extend %txt_red;
}

/*
11. インターポレーション
*/
$IMG_PATH: "../img/";
$SELECTOR: '.box,.item';

#{$SELECTOR} {
  $height: 100px;
  $line-count: 10;
  background-image: url(#{$IMG_PATH}bg.png);
  // 計算させたくない
  line-height: #{$height} / #{$line-count};
}
@for $i from 0 to 2 {
  .mt#{$i * 5}{
    margin-top: 5px * $i;
  }
}

// ダブルクオーテーションの２重防止
$text_11: "CSS";
.text{
  content: "#{$text_11} and Sass";
}

// 親セレクタ名を保存してネストの中で使いたい
.goto{
  $first: &;
  .kensuke{
    #{$first}{
      p{
        font-size: 5px;
      }
    }
  }
}

/*
12.
*/
// 3を含む
@for $i from 1 through 3{ }
// 3を含まない
@for $i from 1 to 3{ }

$x: 0;
@while ($x < 10){
  // 処理
  $x: $x + 1;
}

// 配列
$icons: top,qa,contact;
$IMG_PATH2: "../img/";
@each $value in $icons {
  .icon-#{$value} {
    background: url("#{$IMG_PATH2}#{$value}.png");
  }
}

// 配列（マップ型）
$my_map: (
  bgcolor: #ededed,
  fontcolor: #ff0000,
  bdcolor: #000
);

.mapget {
  color: map-get($my_map, fontcolor)
}

// ユーザー定義関数 (呼び出し時に (,150)というのは無理）
@function sum($val1:50px,$val2:50px){
  @return $val1 + $val2;
}
.sum{
  width: sum(100px,200px);
  height: sum();
}

$name: "kensuke";
#name{
  content: $name + "さん";
}
##{$name}{
  font-size: 60px;
}

@mixin linkArrow($side:"right",$color:"#aaa"){

  @if($side!="right" and $side!="left"){
    @warn "引数は「right」か「left」です。";
  }
  position: relative;

  @if($side=="right"){
    padding-right: 20px;
  } @else if($side=="left"){
    padding-left: 20px;
  }

  &::after{
    content: "";
    display: block;
    width: 5px;
    height: 5px;
    position: absolute;
    top: 50%;
    @if($side=="right"){
      right: 10px;
    } @else if($side=="left"){
      left: 10px;
    }

    margin-top: -2.5px;
    border-top: 1px solid #aaa;
    border-right: 1px solid #aaa;
    transform: rotate(45deg);
  }

}

.read_more{
  @include linkArrow("left",#333);
}